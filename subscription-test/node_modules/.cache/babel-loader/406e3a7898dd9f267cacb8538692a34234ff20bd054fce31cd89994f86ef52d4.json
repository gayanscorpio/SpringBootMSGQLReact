{"ast":null,"code":"// This file is adapted from the graphql-ws npm package:\n// https://github.com/enisdenjo/graphql-ws\n//\n// Most of the file comes from that package's README; some other parts (such as\n// isLikeCloseEvent) come from its source.\n//\n// Here's the license of the original code:\n//\n// The MIT License (MIT)\n//\n// Copyright (c) 2020-2021 Denis Badurina\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { __assign, __extends } from \"tslib\";\nimport { print } from \"../../utilities/index.js\";\nimport { ApolloLink } from \"../core/index.js\";\nimport { isNonNullObject, Observable } from \"../../utilities/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\n// https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close_event\nfunction isLikeCloseEvent(val) {\n  return isNonNullObject(val) && \"code\" in val && \"reason\" in val;\n}\n// https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/error_event\nfunction isLikeErrorEvent(err) {\n  var _a;\n  return isNonNullObject(err) && ((_a = err.target) === null || _a === void 0 ? void 0 : _a.readyState) === WebSocket.CLOSED;\n}\nvar GraphQLWsLink = /** @class */function (_super) {\n  __extends(GraphQLWsLink, _super);\n  function GraphQLWsLink(client) {\n    var _this = _super.call(this) || this;\n    _this.client = client;\n    return _this;\n  }\n  GraphQLWsLink.prototype.request = function (operation) {\n    var _this = this;\n    return new Observable(function (observer) {\n      return _this.client.subscribe(__assign(__assign({}, operation), {\n        query: print(operation.query)\n      }), {\n        next: observer.next.bind(observer),\n        complete: observer.complete.bind(observer),\n        error: function (err) {\n          if (err instanceof Error) {\n            return observer.error(err);\n          }\n          var likeClose = isLikeCloseEvent(err);\n          if (likeClose || isLikeErrorEvent(err)) {\n            return observer.error(\n            // reason will be available on clean closes\n            new Error(\"Socket closed\".concat(likeClose ? \" with event \".concat(err.code) : \"\").concat(likeClose ? \" \".concat(err.reason) : \"\")));\n          }\n          return observer.error(new ApolloError({\n            graphQLErrors: Array.isArray(err) ? err : [err]\n          }));\n        }\n        // casting around a wrong type in graphql-ws, which incorrectly expects `Sink<ExecutionResult>`\n      });\n    });\n  };\n  return GraphQLWsLink;\n}(ApolloLink);\nexport { GraphQLWsLink };","map":{"version":3,"names":["print","ApolloLink","isNonNullObject","Observable","ApolloError","isLikeCloseEvent","val","isLikeErrorEvent","err","_a","target","readyState","WebSocket","CLOSED","GraphQLWsLink","_super","__extends","client","_this","call","prototype","request","operation","observer","subscribe","__assign","query","next","bind","complete","error","Error","likeClose","concat","code","reason","graphQLErrors","Array","isArray"],"sources":["/Users/gayankumara/SpringBootMSGQLReact/subscription-test/node_modules/@apollo/src/link/subscriptions/index.ts"],"sourcesContent":["// This file is adapted from the graphql-ws npm package:\n// https://github.com/enisdenjo/graphql-ws\n//\n// Most of the file comes from that package's README; some other parts (such as\n// isLikeCloseEvent) come from its source.\n//\n// Here's the license of the original code:\n//\n// The MIT License (MIT)\n//\n// Copyright (c) 2020-2021 Denis Badurina\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport { print } from \"../../utilities/index.js\";\nimport type { Client, Sink } from \"graphql-ws\";\n\nimport type { Operation, FetchResult } from \"../core/index.js\";\nimport { ApolloLink } from \"../core/index.js\";\nimport { isNonNullObject, Observable } from \"../../utilities/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport type { FormattedExecutionResult } from \"graphql\";\n\n// https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close_event\nfunction isLikeCloseEvent(val: unknown): val is CloseEvent {\n  return isNonNullObject(val) && \"code\" in val && \"reason\" in val;\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/error_event\nfunction isLikeErrorEvent(err: unknown): err is Event {\n  return isNonNullObject(err) && err.target?.readyState === WebSocket.CLOSED;\n}\n\nexport class GraphQLWsLink extends ApolloLink {\n  constructor(public readonly client: Client) {\n    super();\n  }\n\n  public request(operation: Operation): Observable<FetchResult> {\n    return new Observable((observer) => {\n      return this.client.subscribe<FetchResult>(\n        { ...operation, query: print(operation.query) },\n        {\n          next: observer.next.bind(observer),\n          complete: observer.complete.bind(observer),\n          error: (err) => {\n            if (err instanceof Error) {\n              return observer.error(err);\n            }\n            const likeClose = isLikeCloseEvent(err);\n            if (likeClose || isLikeErrorEvent(err)) {\n              return observer.error(\n                // reason will be available on clean closes\n                new Error(\n                  `Socket closed${likeClose ? ` with event ${err.code}` : \"\"}${\n                    likeClose ? ` ${err.reason}` : \"\"\n                  }`\n                )\n              );\n            }\n\n            return observer.error(\n              new ApolloError({\n                graphQLErrors: Array.isArray(err) ? err : [err],\n              })\n            );\n          },\n          // casting around a wrong type in graphql-ws, which incorrectly expects `Sink<ExecutionResult>`\n        } satisfies Sink<FormattedExecutionResult> as any\n      );\n    });\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,KAAK,QAAQ,0BAA0B;AAIhD,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,eAAe,EAAEC,UAAU,QAAQ,0BAA0B;AACtE,SAASC,WAAW,QAAQ,uBAAuB;AAGnD;AACA,SAASC,gBAAgBA,CAACC,GAAY;EACpC,OAAOJ,eAAe,CAACI,GAAG,CAAC,IAAI,MAAM,IAAIA,GAAG,IAAI,QAAQ,IAAIA,GAAG;AACjE;AAEA;AACA,SAASC,gBAAgBA,CAACC,GAAY;;EACpC,OAAON,eAAe,CAACM,GAAG,CAAC,IAAI,EAAAC,EAAA,GAAAD,GAAG,CAACE,MAAM,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,UAAU,MAAKC,SAAS,CAACC,MAAM;AAC5E;AAEA,IAAAC,aAAA,0BAAAC,MAAA;EAAmCC,SAAA,CAAAF,aAAA,EAAAC,MAAA;EACjC,SAAAD,cAA4BG,MAAc;IACxC,IAAAC,KAAA,GAAAH,MAAK,CAAAI,IAAA,MAAE;IADmBD,KAAA,CAAAD,MAAM,GAANA,MAAM;;EAElC;EAEOH,aAAA,CAAAM,SAAA,CAAAC,OAAO,GAAd,UAAeC,SAAoB;IAAnC,IAAAJ,KAAA;IACE,OAAO,IAAIf,UAAU,CAAC,UAACoB,QAAQ;MAC7B,OAAOL,KAAI,CAACD,MAAM,CAACO,SAAS,CAAAC,QAAA,CAAAA,QAAA,KACrBH,SAAS;QAAEI,KAAK,EAAE1B,KAAK,CAACsB,SAAS,CAACI,KAAK;MAAC,IAC7C;QACEC,IAAI,EAAEJ,QAAQ,CAACI,IAAI,CAACC,IAAI,CAACL,QAAQ,CAAC;QAClCM,QAAQ,EAAEN,QAAQ,CAACM,QAAQ,CAACD,IAAI,CAACL,QAAQ,CAAC;QAC1CO,KAAK,EAAE,SAAAA,CAACtB,GAAG;UACT,IAAIA,GAAG,YAAYuB,KAAK,EAAE;YACxB,OAAOR,QAAQ,CAACO,KAAK,CAACtB,GAAG,CAAC;UAC5B;UACA,IAAMwB,SAAS,GAAG3B,gBAAgB,CAACG,GAAG,CAAC;UACvC,IAAIwB,SAAS,IAAIzB,gBAAgB,CAACC,GAAG,CAAC,EAAE;YACtC,OAAOe,QAAQ,CAACO,KAAK;YACnB;YACA,IAAIC,KAAK,CACP,gBAAAE,MAAA,CAAgBD,SAAS,GAAG,eAAAC,MAAA,CAAezB,GAAG,CAAC0B,IAAI,CAAE,GAAG,EAAE,EAAAD,MAAA,CACxDD,SAAS,GAAG,IAAAC,MAAA,CAAIzB,GAAG,CAAC2B,MAAM,CAAE,GAAG,EAAE,CACjC,CACH,CACF;UACH;UAEA,OAAOZ,QAAQ,CAACO,KAAK,CACnB,IAAI1B,WAAW,CAAC;YACdgC,aAAa,EAAEC,KAAK,CAACC,OAAO,CAAC9B,GAAG,CAAC,GAAGA,GAAG,GAAG,CAACA,GAAG;WAC/C,CAAC,CACH;QACH;QACA;OAC+C,CAClD;IACH,CAAC,CAAC;EACJ,CAAC;EACH,OAAAM,aAAC;AAAD,CAAC,CAvCkCb,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}