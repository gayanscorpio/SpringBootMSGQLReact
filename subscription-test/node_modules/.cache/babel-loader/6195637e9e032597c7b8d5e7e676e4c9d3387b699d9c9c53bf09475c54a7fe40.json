{"ast":null,"code":"// src/ApolloClient.js\nimport { ApolloClient, InMemoryCache, createHttpLink, split } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { GraphQLWsLink } from '@apollo/client/link/subscriptions';\nimport { createClient } from 'graphql-ws';\nimport { getMainDefinition } from '@apollo/client/utilities';\n\n// HTTP link to Apollo Gateway\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:4000/graphql'\n});\n\n// Middleware to add Authorization header\nconst authLink = setContext((_, {\n  headers\n}) => {\n  // Get token from localStorage (set after login)\n  const token = localStorage.getItem('token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '' // send token if exists\n    }\n  };\n});\n\n// WebSocket link → Subscription server\nconst wsLink = new GraphQLWsLink(createClient({\n  url: 'ws://localhost:5001/graphql',\n  connectionParams: () => {\n    const token = localStorage.getItem('token');\n    return {\n      authorization: token ? `Bearer ${token}` : ''\n    };\n  },\n  lazy: false,\n  // makes sure the client connects immediately and stays connected\n  reconnect: true,\n  // automatically reconnect if disconnected\n  onConnect: ctx => console.log(\"WS Client connected:\", ctx.connectionParams)\n}));\n\n// Split link: Queries/Mutations use HTTP, Subscriptions use WS\nconst splitLink = split(({\n  query\n}) => {\n  const definition = getMainDefinition(query);\n  return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n}, wsLink, authLink.concat(httpLink));\n\n// Create Apollo Client with custom cache policies\nconst client = new ApolloClient({\n  link: splitLink,\n  // chain auth link and http link, and ws link\n  cache: new InMemoryCache({\n    typePolicies: {\n      Student: {\n        keyFields: ['id'] // normalize by ID\n      },\n      Book: {\n        keyFields: ['id'],\n        // normalize by ID\n        fields: {\n          borrowedBy: {\n            // Merge function tells Apollo how to safely replace borrowedBy\n            merge(existing, incoming) {\n              return incoming; // Accept new value even if null\n            }\n          }\n        }\n      }\n    }\n  })\n});\nexport default client;","map":{"version":3,"names":["ApolloClient","InMemoryCache","createHttpLink","split","setContext","GraphQLWsLink","createClient","getMainDefinition","httpLink","uri","authLink","_","headers","token","localStorage","getItem","authorization","wsLink","url","connectionParams","lazy","reconnect","onConnect","ctx","console","log","splitLink","query","definition","kind","operation","concat","client","link","cache","typePolicies","Student","keyFields","Book","fields","borrowedBy","merge","existing","incoming"],"sources":["/Users/gayankumara/SpringBootMSGQLReact/subscription-test/src/ApolloClient.js"],"sourcesContent":["// src/ApolloClient.js\nimport { ApolloClient, InMemoryCache, createHttpLink, split } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { GraphQLWsLink } from '@apollo/client/link/subscriptions';\nimport { createClient } from 'graphql-ws';\nimport { getMainDefinition } from '@apollo/client/utilities';\n\n// HTTP link to Apollo Gateway\nconst httpLink = createHttpLink({\n    uri: 'http://localhost:4000/graphql',\n});\n\n// Middleware to add Authorization header\nconst authLink = setContext((_, { headers }) => {\n    // Get token from localStorage (set after login)\n    const token = localStorage.getItem('token');\n\n    return {\n        headers: {\n            ...headers,\n            authorization: token ? `Bearer ${token}` : '', // send token if exists\n        },\n    };\n});\n\n// WebSocket link → Subscription server\nconst wsLink = new GraphQLWsLink(\n    createClient({\n        url: 'ws://localhost:5001/graphql',\n        connectionParams: () => {\n            const token = localStorage.getItem('token');\n            return {\n                authorization: token ? `Bearer ${token}` : '',\n            };\n        },\n        lazy: false, // makes sure the client connects immediately and stays connected\n        reconnect: true,  // automatically reconnect if disconnected\n        onConnect: (ctx) => console.log(\"WS Client connected:\", ctx.connectionParams)\n\n    })\n);\n\n// Split link: Queries/Mutations use HTTP, Subscriptions use WS\nconst splitLink = split(\n    ({ query }) => {\n        const definition = getMainDefinition(query);\n        return (\n            definition.kind === 'OperationDefinition' &&\n            definition.operation === 'subscription'\n        );\n    },\n    wsLink,\n    authLink.concat(httpLink)\n);\n\n// Create Apollo Client with custom cache policies\nconst client = new ApolloClient({\n    link: splitLink, // chain auth link and http link, and ws link\n    cache: new InMemoryCache({\n        typePolicies: {\n            Student: {\n                keyFields: ['id'], // normalize by ID\n            },\n            Book: {\n                keyFields: ['id'], // normalize by ID\n                fields: {\n                    borrowedBy: {\n                        // Merge function tells Apollo how to safely replace borrowedBy\n                        merge(existing, incoming) {\n                            return incoming; // Accept new value even if null\n                        },\n                    },\n                },\n            },\n        }\n    }),\n});\n\nexport default client;\n"],"mappings":"AAAA;AACA,SAASA,YAAY,EAAEC,aAAa,EAAEC,cAAc,EAAEC,KAAK,QAAQ,gBAAgB;AACnF,SAASC,UAAU,QAAQ,6BAA6B;AACxD,SAASC,aAAa,QAAQ,mCAAmC;AACjE,SAASC,YAAY,QAAQ,YAAY;AACzC,SAASC,iBAAiB,QAAQ,0BAA0B;;AAE5D;AACA,MAAMC,QAAQ,GAAGN,cAAc,CAAC;EAC5BO,GAAG,EAAE;AACT,CAAC,CAAC;;AAEF;AACA,MAAMC,QAAQ,GAAGN,UAAU,CAAC,CAACO,CAAC,EAAE;EAAEC;AAAQ,CAAC,KAAK;EAC5C;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAE3C,OAAO;IACHH,OAAO,EAAE;MACL,GAAGA,OAAO;MACVI,aAAa,EAAEH,KAAK,GAAG,UAAUA,KAAK,EAAE,GAAG,EAAE,CAAE;IACnD;EACJ,CAAC;AACL,CAAC,CAAC;;AAEF;AACA,MAAMI,MAAM,GAAG,IAAIZ,aAAa,CAC5BC,YAAY,CAAC;EACTY,GAAG,EAAE,6BAA6B;EAClCC,gBAAgB,EAAEA,CAAA,KAAM;IACpB,MAAMN,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAO;MACHC,aAAa,EAAEH,KAAK,GAAG,UAAUA,KAAK,EAAE,GAAG;IAC/C,CAAC;EACL,CAAC;EACDO,IAAI,EAAE,KAAK;EAAE;EACbC,SAAS,EAAE,IAAI;EAAG;EAClBC,SAAS,EAAGC,GAAG,IAAKC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEF,GAAG,CAACJ,gBAAgB;AAEhF,CAAC,CACL,CAAC;;AAED;AACA,MAAMO,SAAS,GAAGvB,KAAK,CACnB,CAAC;EAAEwB;AAAM,CAAC,KAAK;EACX,MAAMC,UAAU,GAAGrB,iBAAiB,CAACoB,KAAK,CAAC;EAC3C,OACIC,UAAU,CAACC,IAAI,KAAK,qBAAqB,IACzCD,UAAU,CAACE,SAAS,KAAK,cAAc;AAE/C,CAAC,EACDb,MAAM,EACNP,QAAQ,CAACqB,MAAM,CAACvB,QAAQ,CAC5B,CAAC;;AAED;AACA,MAAMwB,MAAM,GAAG,IAAIhC,YAAY,CAAC;EAC5BiC,IAAI,EAAEP,SAAS;EAAE;EACjBQ,KAAK,EAAE,IAAIjC,aAAa,CAAC;IACrBkC,YAAY,EAAE;MACVC,OAAO,EAAE;QACLC,SAAS,EAAE,CAAC,IAAI,CAAC,CAAE;MACvB,CAAC;MACDC,IAAI,EAAE;QACFD,SAAS,EAAE,CAAC,IAAI,CAAC;QAAE;QACnBE,MAAM,EAAE;UACJC,UAAU,EAAE;YACR;YACAC,KAAKA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;cACtB,OAAOA,QAAQ,CAAC,CAAC;YACrB;UACJ;QACJ;MACJ;IACJ;EACJ,CAAC;AACL,CAAC,CAAC;AAEF,eAAeX,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}