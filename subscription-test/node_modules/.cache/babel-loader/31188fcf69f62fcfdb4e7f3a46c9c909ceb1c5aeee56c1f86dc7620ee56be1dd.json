{"ast":null,"code":"var _jsxFileName = \"/Users/gayankumara/SpringBootMSGQLReact/subscription-test/src/BookList.js\",\n  _s = $RefreshSig$();\n// src/BookList.js\nimport React, { useEffect, useState } from \"react\";\nimport { useSubscription, gql } from \"@apollo/client\";\n\n// GraphQL subscription\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOOK_ADDED_SUBSCRIPTION = gql`\n  subscription {\n    bookAdded {\n      id\n      title\n      author\n      totalCopies\n      availableCopies\n    }\n  }\n`;\nfunction BookList() {\n  _s();\n  const [books, setBooks] = useState([]);\n\n  // Apollo subscription hook\n  const {\n    data,\n    loading,\n    error\n  } = useSubscription(BOOK_ADDED_SUBSCRIPTION, {\n    onData: ({\n      data\n    }) => {\n      console.log(\"Raw subscription object:\", data);\n      const newBook = data === null || data === void 0 ? void 0 : data.bookAdded;\n      console.log('<<<<<<<<<<<<<<<, newBook :', newBook);\n      if (!newBook) {\n        console.warn(\"⚠️ Subscription sent null, ignoring...\");\n        return;\n      }\n      setBooks(prevBooks => {\n        if (prevBooks.some(b => (b === null || b === void 0 ? void 0 : b.id) === newBook.id)) return prevBooks;\n        return [...prevBooks, newBook];\n      });\n    }\n  });\n\n  // Log errors if subscription fails\n  useEffect(() => {\n    if (error) console.error(\"Subscription error:\", error);\n  }, [error]);\n  if (loading && books.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading books...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 47\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Live Book List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: books && books.length > 0 ? books.filter(book => book && book.title) // prevent null crash\n      .map(book => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: book.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 33\n        }, this), \" by \", book.author, \" \\u2014\", \" \", book.availableCopies, \"/\", book.totalCopies, \" copies available\"]\n      }, book.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 29\n      }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"No books yet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n_s(BookList, \"j/qZwNVSc2Rlw0lInBpFxufdA9Q=\", false, function () {\n  return [useSubscription];\n});\n_c = BookList;\nexport default BookList;\nvar _c;\n$RefreshReg$(_c, \"BookList\");","map":{"version":3,"names":["React","useEffect","useState","useSubscription","gql","jsxDEV","_jsxDEV","BOOK_ADDED_SUBSCRIPTION","BookList","_s","books","setBooks","data","loading","error","onData","console","log","newBook","bookAdded","warn","prevBooks","some","b","id","length","children","fileName","_jsxFileName","lineNumber","columnNumber","filter","book","title","map","author","availableCopies","totalCopies","_c","$RefreshReg$"],"sources":["/Users/gayankumara/SpringBootMSGQLReact/subscription-test/src/BookList.js"],"sourcesContent":["// src/BookList.js\nimport React, { useEffect, useState } from \"react\";\nimport { useSubscription, gql } from \"@apollo/client\";\n\n// GraphQL subscription\nconst BOOK_ADDED_SUBSCRIPTION = gql`\n  subscription {\n    bookAdded {\n      id\n      title\n      author\n      totalCopies\n      availableCopies\n    }\n  }\n`;\n\nfunction BookList() {\n    const [books, setBooks] = useState([]);\n\n    // Apollo subscription hook\n    const { data, loading, error } = useSubscription(BOOK_ADDED_SUBSCRIPTION, {\n        onData: ({ data }) => {\n            console.log(\"Raw subscription object:\", data);\n            const newBook = data?.bookAdded;\n            console.log('<<<<<<<<<<<<<<<, newBook :', newBook);\n            if (!newBook) {\n                console.warn(\"⚠️ Subscription sent null, ignoring...\");\n                return;\n            }\n\n            setBooks(prevBooks => {\n                if (prevBooks.some(b => b?.id === newBook.id)) return prevBooks;\n                return [...prevBooks, newBook];\n            });\n        },\n    });\n\n    // Log errors if subscription fails\n    useEffect(() => {\n        if (error) console.error(\"Subscription error:\", error);\n    }, [error]);\n\n    if (loading && books.length === 0) return <p>Loading books...</p>;\n\n    return (\n        <div>\n            <h2>Live Book List</h2>\n            <ul>\n                {books && books.length > 0 ? (\n                    books\n                        .filter(book => book && book.title) // prevent null crash\n                        .map(book => (\n                            <li key={book.id}>\n                                <strong>{book.title}</strong> by {book.author} —{\" \"}\n                                {book.availableCopies}/{book.totalCopies} copies available\n                            </li>\n                        ))\n                ) : (\n                    <li>No books yet</li>\n                )}\n            </ul>\n        </div>\n    );\n}\n\nexport default BookList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}