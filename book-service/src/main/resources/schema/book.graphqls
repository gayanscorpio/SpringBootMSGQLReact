# Mutation for Book
type Mutation {
  addBook(title: String!, author: String!, totalCopies: Int!): Book
  updateBook(id: ID!, title: String!, author: String!, totalCopies: Int!): Book
  deleteBook(id: ID!): Boolean
}

type Query {
  allBooks: [Book]
}

extend type Mutation {
  borrowBook(bookId: ID!, studentId: ID!): Book
  returnBook(bookId: ID!, studentId: ID!): Book
}

# Book Type
type Book {
  id: ID!
  title: String!
  author: String!
  totalCopies: Int!
  availableCopies: Int!
  borrowedBy: [Student!]!   # List of students currently borrowing this book
}


# Entity reference for Student (imported from Student service)
# The id is the "federation key" that links the same Student across services.
type Student @key(fields: "id") {
  id: ID! # reference back to the owning service - Student
}

# Extended fields for Student
extend type Student @key(fields: "id") {
  borrowedBooksCount: Int  #Extended field for Student, resolved by the Book service. Counts how many books the student borrowed.
}

extend type Student @key(fields: "id") {
  borrowedBooks: [Book!]!  #borrowedBooks â†’ resolved in Book service.
}





